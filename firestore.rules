rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }

    // Public parks catalog: only admin can write
    match /parks/{parkId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // User profiles (publicly readable, owner-maintained)
    match /users/{uid} {
      allow read: if true;

      // Require displayName on create (2â€“30 chars)
      allow create: if isOwner(uid)
        && request.resource.data.displayName is string
        && request.resource.data.displayName.matches('^.{2,30}$');

      // Only allow owner to edit limited fields; keep displayName non-empty
      allow update: if isOwner(uid)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['displayName','photoURL','bio'])
        && request.resource.data.displayName is string
        && request.resource.data.displayName.matches('^.{2,30}$');
    }

    // Each user's "visited parks" subcollection (private to owner)
    match /users/{uid}/visited/{parkId} {
      allow read, write: if isOwner(uid);
    }

    // Public photo metadata for parks
    match /photos/{photoId} {
      allow read: if true; // anyone can view photos metadata
      // users can create their own upload record
      allow create: if request.auth != null
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.parkId is string
                    && request.resource.data.status in ['uploading', 'processing']
                    && request.time == request.resource.data.createdAt;
      // optional: allow user to update their record with a caption; function bypasses rules anyway
      allow update, delete: if false;
    }

    // Each user can create/delete their own visited park docs
    match /users/{uid}/visited/{parkId} {
      allow read: if request.auth != null && request.auth.uid == uid;
      allow create: if request.auth != null
                    && request.auth.uid == uid
                    && request.resource.data.parkId == parkId
                    && ('createdAt' in request.resource.data); // just require it to be present
      allow delete: if request.auth != null && request.auth.uid == uid;
      allow update: if false;
    }
  }
}
